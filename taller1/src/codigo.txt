//main.java

import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class Main {
    @SuppressWarnings({"CallToPrintStackTrace", "UseSpecificCatch"})
    public static void main(String[] args) {
        try {
            // Usar el aspecto nativo del sistema
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            
            // Algunas mejoras visuales adicionales
            UIManager.put("Button.arc", 10);
            UIManager.put("Component.arc", 8);
            UIManager.put("ProgressBar.arc", 8);
            UIManager.put("TextComponent.arc", 8);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        SwingUtilities.invokeLater(() -> new PantallaInicio());
    }
}


// pantallainicio.java

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PantallaInicio extends JFrame {
    public PantallaInicio() {
        super("Tabla Hash - Bienvenida");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        // Panel principal con gradiente
        JPanel panelPrincipal = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g.create();
                int w = getWidth();
                int h = getHeight();
                GradientPaint gp = new GradientPaint(
                    0, 0, new Color(240, 240, 255),
                    0, h, new Color(220, 220, 245)
                );
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
                g2d.dispose();
            }
        };
        panelPrincipal.setLayout(new BorderLayout(20, 20));
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(30, 40, 30, 40));
        
        // Título de la aplicación
        JLabel lblTitulo = new JLabel("Tabla Hash");
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 36));
        lblTitulo.setHorizontalAlignment(SwingConstants.CENTER);
        lblTitulo.setForeground(new Color(50, 50, 100));
        
        // Subtítulo
        JLabel lblSubtitulo = new JLabel("Aplicación para gestión de estructuras de datos");
        lblSubtitulo.setFont(new Font("Segoe UI", Font.ITALIC, 18));
        lblSubtitulo.setHorizontalAlignment(SwingConstants.CENTER);
        lblSubtitulo.setForeground(new Color(80, 80, 130));
        
        // Panel superior
        JPanel panelSuperior = new JPanel();
        panelSuperior.setLayout(new BoxLayout(panelSuperior, BoxLayout.Y_AXIS));
        panelSuperior.setOpaque(false);
        panelSuperior.add(lblTitulo);
        panelSuperior.add(Box.createRigidArea(new Dimension(0, 10)));
        panelSuperior.add(lblSubtitulo);
        
        // Funcionalidades
        JPanel panelFuncionalidades = new JPanel();
        panelFuncionalidades.setLayout(new BoxLayout(panelFuncionalidades, BoxLayout.Y_AXIS));
        panelFuncionalidades.setOpaque(false);
        panelFuncionalidades.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(150, 150, 200), 1, true),
                "Funcionalidades",
                0,
                0,
                new Font("Segoe UI", Font.BOLD, 16),
                new Color(70, 70, 120)
            ),
            BorderFactory.createEmptyBorder(20, 20, 20, 20)
        ));
        
        // Lista de funcionalidades
        String[] funcionalidades = {
            "• Creación y visualización de tablas hash",
            "• Múltiples métodos de transformación (Módulo, Cuadrado, Plegamiento, Truncamiento)",
            "• Gestión avanzada de colisiones (Lineal, Cuadrática, Doble Hash)",
            "• Operaciones de inserción, búsqueda y borrado de claves",
            "• Búsqueda por hash, lineal y binaria",
            "• Persistencia de datos entre sesiones",
            "• Información detallada sobre operaciones y comparaciones"
        };
        
        for (String func : funcionalidades) {
            JLabel lblFunc = new JLabel(func);
            lblFunc.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            lblFunc.setForeground(new Color(50, 50, 90));
            lblFunc.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            panelFuncionalidades.add(lblFunc);
            panelFuncionalidades.add(Box.createRigidArea(new Dimension(0, 5)));
        }
        
        // Botón de inicio
        JButton btnIniciar = new JButton("Comenzar");
        btnIniciar.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnIniciar.setBackground(new Color(100, 130, 220));
        btnIniciar.setForeground(Color.WHITE);
        btnIniciar.setFocusPainted(false);
        btnIniciar.setPreferredSize(new Dimension(200, 50));
        btnIniciar.setBorderPainted(false);
        btnIniciar.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Efecto hover para el botón
        btnIniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnIniciar.setBackground(new Color(80, 110, 200));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnIniciar.setBackground(new Color(100, 130, 220));
            }
        });
        
        btnIniciar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                SwingUtilities.invokeLater(() -> new TablaHashApp());
            }
        });
        
        // Panel inferior con botón centrado
        JPanel panelBoton = new JPanel();
        panelBoton.setOpaque(false);
        panelBoton.add(btnIniciar);
        
        // Añadir componentes al panel principal
        panelPrincipal.add(panelSuperior, BorderLayout.NORTH);
        panelPrincipal.add(panelFuncionalidades, BorderLayout.CENTER);
        panelPrincipal.add(panelBoton, BorderLayout.SOUTH);
        
        // Añadir panel principal al frame
        add(panelPrincipal);
        setVisible(true);
    }
}

// persistenciaUtil.java

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class PersistenciaUtil {
    private static final String ARCHIVO_DATOS = "tabla_hash_datos.dat";
    
    // Guardar datos de la aplicación
    public static void guardarDatos(TablaHash tablaHash, List<Integer> clavesOriginales, String metodoHash) {
        try (ObjectOutputStream out = new ObjectOutputStream(
                new FileOutputStream(ARCHIVO_DATOS))) {
            
            DatosAplicacion datos = new DatosAplicacion(tablaHash, clavesOriginales, metodoHash);
            out.writeObject(datos);
            
        } catch (IOException e) {
            System.err.println("Error al guardar los datos: " + e.getMessage());
        }
    }
    
    // Cargar datos de la aplicación
    public static DatosAplicacion cargarDatos() {
        try (ObjectInputStream in = new ObjectInputStream(
                new FileInputStream(ARCHIVO_DATOS))) {
            
            return (DatosAplicacion) in.readObject();
            
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("No se encontraron datos guardados o error al cargar: " + e.getMessage());
            return null;
        }
    }
    
    // Verificar si existen datos guardados
    public static boolean existenDatosGuardados() {
        File archivo = new File(ARCHIVO_DATOS);
        return archivo.exists() && archivo.length() > 0;
    }
    
    // Clase para almacenar todos los datos necesarios
    public static class DatosAplicacion implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private TablaHash tablaHash;
        private List<Integer> clavesOriginales;
        private String metodoHash;
        
        public DatosAplicacion(TablaHash tablaHash, List<Integer> clavesOriginales, String metodoHash) {
            this.tablaHash = tablaHash;
            this.clavesOriginales = clavesOriginales;
            this.metodoHash = metodoHash;
        }
        
        public TablaHash getTablaHash() {
            return tablaHash;
        }
        
        public List<Integer> getClavesOriginales() {
            return clavesOriginales;
        }
        
        public String getMetodoHash() {
            return metodoHash;
        }
    }
}

//resultadobusqueda.java

public class ResultadoBusqueda extends ResultadoOperacion {
    @SuppressWarnings("FieldMayBeFinal")
    private int comparaciones;
    
    public ResultadoBusqueda(boolean exito, String mensaje, int posicion, int comparaciones) {
        super(exito, mensaje, posicion);
        this.comparaciones = comparaciones;
    }
    
    public int getComparaciones() {
        return comparaciones;
    }
}

//resultadooperacion.java

public class ResultadoOperacion {
    @SuppressWarnings("FieldMayBeFinal")
    private boolean exito;
    @SuppressWarnings("FieldMayBeFinal")
    private String mensaje;
    @SuppressWarnings("FieldMayBeFinal")
    private int posicion;
    
    public ResultadoOperacion(boolean exito, String mensaje, int posicion) {
        this.exito = exito;
        this.mensaje = mensaje;
        this.posicion = posicion;
    }
    
    public boolean isExito() {
        return exito;
    }
    
    public String getMensaje() {
        return mensaje;
    }
    
    public int getPosicion() {
        return posicion;
    }
}

//tablahash.java

//tablahash.java

import java.io.Serializable;
import java.util.Arrays;

public class TablaHash implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private int[] tablaHash;
    private int numClaves;
    private int digitosClaves;
    private String metodoInsercion;
    private String metodoColision;
    
    public TablaHash(int numClaves, int digitosClaves, String metodoInsercion, String metodoColision) {
        this.numClaves = numClaves;
        this.digitosClaves = digitosClaves;
        this.metodoInsercion = metodoInsercion;
        this.metodoColision = metodoColision;
        this.tablaHash = new int[numClaves];
        Arrays.fill(tablaHash, -1);  // -1 indica posición vacía
    }
    
    public int getNumClaves() {
        return numClaves;
    }
    
    public int getDigitosClaves() {
        return digitosClaves;
    }
    
    public int[] getTablaHash() {
        return tablaHash;
    }
    
    public String getMetodoInsercion() {
        return metodoInsercion;
    }
    
    public String getMetodoColision() {
        return metodoColision;
    }
    
    public ResultadoOperacion insertarClave(int clave, String metodo) {
        // Determinar índice según método seleccionado
        int indiceOriginal = transformarClave(clave, metodo);
        int indice = indiceOriginal;
        int intentos = 0;
        
        while (intentos < numClaves) {
            // Verificar si la posición está vacía o ya contiene la misma clave
            if (tablaHash[indice] == -1) {
                // La posición está vacía, podemos insertar
                tablaHash[indice] = clave;
                return new ResultadoOperacion(true, 
                    "Clave " + clave + " insertada en posición " + (indice + 1) + 
                    (intentos > 0 ? " (tras resolver colisión)" : ""), 
                    indice);
            } else if (tablaHash[indice] == clave) {
                // La clave ya existe en la tabla
                return new ResultadoOperacion(false, 
                    "La clave " + clave + " ya existe en la tabla.", 
                    indice);
            }
            
            // Si hay colisión, calcular siguiente posición según método de colisión
            indice = siguientePosicion(indiceOriginal, ++intentos, metodo);
            indice = indice % numClaves; // Asegurar que el índice esté dentro del rango
        }
        
        // Si llegamos aquí, la tabla está llena o no se pudo resolver la colisión
        return new ResultadoOperacion(false, 
            "Error: No se pudo insertar la clave " + clave + ". La tabla está llena o no se pudo resolver la colisión.", 
            -1);
    }
    
    // Método para determinar la siguiente posición según método de colisión
    private int siguientePosicion(int indiceOriginal, int intento, String metodo) {
        switch (metodoColision) {
            case "Lineal":
                // Sondeo lineal: indice = (h(k) + i) % m
                return (indiceOriginal + intento) % numClaves;
                
            case "Cuadrática":
                // Sondeo cuadrático: indice = (h(k) + i²) % m
                return (indiceOriginal + intento * intento) % numClaves;
                
            case "Doble Hash":
                // Doble hash: indice = (h1(k) + i * h2(k)) % m
                // Para h2, usamos un método simple: (clave % (m-1)) + 1 para garantizar valor > 0
                int clave = tablaHash[indiceOriginal]; // Obtener la clave que causó la colisión
                if (clave == -1) clave = indiceOriginal; // Si no hay clave, usar el índice como respaldo
                int h2 = (clave % (numClaves - 1)) + 1;
                return (indiceOriginal + intento * h2) % numClaves;
                
            default:
                // Por defecto, usar sondeo lineal
                return (indiceOriginal + intento) % numClaves;
        }
    }
    
    public ResultadoBusqueda buscarClaveHash(int clave, String metodo) {
        int indiceOriginal = transformarClave(clave, metodo);
        int indice = indiceOriginal;
        int comparaciones = 0;
        int intentos = 0;
        
        while (intentos < numClaves && tablaHash[indice] != -1) {
            comparaciones++;
            
            if (tablaHash[indice] == clave) {
                return new ResultadoBusqueda(true, 
                    "Búsqueda por Transformación: Clave " + clave + 
                    " encontrada en posición " + (indice + 1) + 
                    " (Comparaciones: " + comparaciones + ")", 
                    indice, comparaciones);
            }
            
            // Si no es la clave y estamos usando un método de colisión, probar siguiente posición
            if (metodoInsercion.equals("Hash")) {
                indice = siguientePosicion(indiceOriginal, ++intentos, metodo);
                indice = indice % numClaves;
            } else {
                // Si no es inserción hash, no seguimos buscando
                break;
            }
        }
        
        return new ResultadoBusqueda(false, 
            "Búsqueda por Transformación: Clave " + clave + 
            " no encontrada (Comparaciones: " + comparaciones + ")", 
            -1, comparaciones);
    }
    
    public ResultadoBusqueda buscarClaveLineal(int clave) {
        int comparaciones = 0;
        
        for (int i = 0; i < numClaves; i++) {
            comparaciones++;
            if (tablaHash[i] == clave) {
                return new ResultadoBusqueda(true, 
                    "Búsqueda Lineal: Clave " + clave + 
                    " encontrada en posición " + (i + 1) +
                    " (Comparaciones: " + comparaciones + ")", 
                    i, comparaciones);
            }
        }
        
        return new ResultadoBusqueda(false, 
            "Búsqueda Lineal: Clave " + clave + 
            " no encontrada (Comparaciones: " + comparaciones + ")", 
            -1, comparaciones);
    }
    
    public ResultadoBusqueda buscarClaveBinaria(int clave) {
        // Para búsqueda binaria, necesitamos una copia ordenada
        int[] tablaOrdenada = Arrays.stream(tablaHash).filter(v -> v != -1).toArray();
        Arrays.sort(tablaOrdenada);
        
        int inicio = 0;
        int fin = tablaOrdenada.length - 1;
        int comparaciones = 0;
        
        while (inicio <= fin) {
            comparaciones++;
            int medio = (inicio + fin) / 2;
            
            if (tablaOrdenada[medio] == clave) {
                // Buscar la posición original en la tabla hash
                for (int i = 0; i < numClaves; i++) {
                    if (tablaHash[i] == clave) {
                        return new ResultadoBusqueda(true, 
                            "Búsqueda Binaria: Clave " + clave + 
                            " encontrada en posición " + (i + 1) + 
                            " (Comparaciones: " + comparaciones + ")", 
                            i, comparaciones);
                    }
                }
            } else if (tablaOrdenada[medio] < clave) {
                inicio = medio + 1;
            } else {
                fin = medio - 1;
            }
        }
        
        return new ResultadoBusqueda(false, 
            "Búsqueda Binaria: Clave " + clave + 
            " no encontrada (Comparaciones: " + comparaciones + ")", 
            -1, comparaciones);
    }
    
    public ResultadoBusqueda buscarClave(int clave, String metodo) {
        switch (metodoInsercion) {
            case "Hash":
                return buscarClaveHash(clave, metodo);
            case "Lineal":
                return buscarClaveLineal(clave);
            case "Binaria":
                return buscarClaveBinaria(clave);
            default:
                return buscarClaveHash(clave, metodo);
        }
    }
    
    public ResultadoOperacion borrarClave(int clave, String metodo) {
        ResultadoBusqueda resultadoBusqueda = buscarClave(clave, metodo);
        
        if (resultadoBusqueda.isExito()) {
            int indice = resultadoBusqueda.getPosicion();
            tablaHash[indice] = -1;  // Marcar como borrado
            return new ResultadoOperacion(true, 
                "Clave " + clave + " borrada de la posición " + (indice + 1), 
                indice);
        }
        
        return new ResultadoOperacion(false, 
            "La clave " + clave + " no se encuentra en la tabla.", 
            -1);
    }
    
    public int transformarClave(int clave, String metodo) {
        int indice = 0;
        
        switch (metodo) {
            case "Módulo" -> indice = clave % numClaves;
            case "Cuadrado" -> {
                int cuadrado = clave * clave;
                String cuadradoStr = String.valueOf(cuadrado);
                
                // Determinar cuántos dígitos necesitamos extraer basado en numClaves
                int digitosNecesarios = String.valueOf(numClaves).length();
                
                // Extraer dígitos del centro
                int inicio = Math.max(0, (cuadradoStr.length() - digitosNecesarios) / 2);
                String parteMedia = cuadradoStr.substring(
                        inicio,
                        Math.min(inicio + digitosNecesarios, cuadradoStr.length())
                );
                
                // Convertir a entero y aplicar módulo
                indice = Integer.parseInt(parteMedia) % numClaves;
            }
            case "Plegamiento" -> {
                String claveStr = String.valueOf(clave); // Convertir a string sin padding
                int suma = 0;
                
                // Determinar tamaño de grupo basado en la longitud de la tabla
                int tamanoGrupo;
                if (numClaves < 10) {
                    tamanoGrupo = 1;
                } else if (numClaves < 100) {
                    tamanoGrupo = 1;
                } else if (numClaves < 1000) {
                    tamanoGrupo = 2;
                } else {
                    tamanoGrupo = 3;
                }
                
                // Dividir la clave en grupos y sumarlos
                for (int i = 0; i < claveStr.length(); i += tamanoGrupo) {
                    int endIndex = Math.min(i + tamanoGrupo, claveStr.length());
                    String grupo = claveStr.substring(i, endIndex);
                    suma += Integer.parseInt(grupo);
                }
                
                // Si la suma es mayor que la longitud de la tabla, aplicar módulo
                if (suma > numClaves) {
                    suma = suma % numClaves;
                }
                
                indice = suma;
            }
            case "Truncamiento" -> {
                String claveStr = String.valueOf(clave);
                
                // Determinar cuántos dígitos tomar basado en la longitud de la tabla
                int digitosATomar = String.valueOf(numClaves).length();
                
                // Tomar los últimos dígitos de la clave
                String ultimosDigitos;
                if (claveStr.length() <= digitosATomar) {
                    ultimosDigitos = claveStr; // Si la clave es más corta, usar completa
                } else {
                    ultimosDigitos = claveStr.substring(claveStr.length() - digitosATomar);
                }
                
                // Convertir a entero y aplicar módulo
                indice = Integer.parseInt(ultimosDigitos) % numClaves;
            }
        }
        
        return indice;
    }
}

// TablaHashApp.java

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;

public class TablaHashApp extends JFrame {
    // Componentes gráficos principales
    private JTable tabla;
    private DefaultTableModel modeloTabla;
    private JScrollPane scrollTabla;
    private JTextArea txtResultado;
    private JScrollPane scrollResultado;
    private JPanel panelBotones;
    
    // Controlador
    private TablaHashControlador controlador;
    
    /** Actualiza la tabla con los datos actuales del controlador */
    private void actualizarTabla() {
        if (controlador != null && controlador.getTablaHash() != null) {
            int[] tablaHash = controlador.getTablaHash().getTablaHash();
            for (int i = 0; i < modeloTabla.getRowCount(); i++) {
                modeloTabla.setValueAt(tablaHash[i] == -1 ? "" : tablaHash[i], i, 1);
            }
        }
    }
    
    // Lista para almacenar claves originales
    private List<Integer> clavesOriginales;
    
    // Método hash seleccionado
    private String metodoHash;
    // Método de inserción
    private String metodoInsercion;
    // Método de colisión
    private String metodoColision;

    /** Muestra un mensaje en el área de resultados */
public void mostrarMensaje(String mensaje) {
    txtResultado.append(mensaje + "\n");
    // (si prefieres un diálogo: JOptionPane.showMessageDialog(this, mensaje); )
}
    public TablaHashApp() {
        super("Tabla Hash");
        setSize(900, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        // Detectar cierre de ventana para guardar datos
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (controlador != null && controlador.getTablaHash() != null) {
                    controlador.guardarDatos(clavesOriginales);
                }
            }
        });
        
        // Se aplica el Look & Feel Nimbus (si está disponible)
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // Se usa el Look & Feel por defecto si Nimbus no está disponible
        }
        
        // Inicializar lista de claves
        clavesOriginales = new ArrayList<>();
        
        // Inicializar controlador
        controlador = new TablaHashControlador(this);
        
        // Intentar cargar datos guardados
        if (PersistenciaUtil.existenDatosGuardados() && controlador.cargarDatos()) {
            // Si hay datos guardados y se cargaron correctamente
            PersistenciaUtil.DatosAplicacion datos = PersistenciaUtil.cargarDatos();
            this.metodoHash = datos.getMetodoHash();
            this.metodoInsercion = datos.getTablaHash().getMetodoInsercion();
            this.metodoColision = datos.getTablaHash().getMetodoColision();
            this.clavesOriginales = datos.getClavesOriginales();
            
            // Inicializar la interfaz con los datos cargados
            inicializarComponentes(datos.getTablaHash().getNumClaves());
            actualizarTabla();
        } else {
            // Mostrar diálogo de configuración si no hay datos guardados
            mostrarDialogoConfiguracion();
        }
        
        setVisible(true);
    }
            // Define the missing method
            private void buscarSegunMetodo() {
                JOptionPane.showMessageDialog(this, "Method buscarSegunMetodo() is not yet implemented.");
            }
    // Métodos agregados para corregir errores graves

private void mostrarDialogoBorrado() {
    javax.swing.JOptionPane.showMessageDialog(null, "Elemento borrado correctamente.", "Borrado", javax.swing.JOptionPane.INFORMATION_MESSAGE);
}

private void reiniciarAplicacion() {
    javax.swing.JOptionPane.showMessageDialog(null, "La aplicación se reiniciará.", "Reiniciar", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    this.dispose(); // Cierra la ventana actual (si TablaHashApp extiende de JFrame)
    new TablaHashApp(); // Crea una nueva instancia de la app
}

private int calcularSiguientePosicion(int posicionActual, int tamañoTabla, String metodoHash, int intento) {
    if (metodoHash.equalsIgnoreCase("lineal")) {
        return (posicionActual + intento) % tamañoTabla;
    } else if (metodoHash.equalsIgnoreCase("cuadratico")) {
        return (posicionActual + intento * intento) % tamañoTabla;
    } else {
        // Método de resolución no reconocido
        return posicionActual;
    }
}

            
    private void inicializarComponentes(int numClaves) {
        // Panel principal con BorderLayout y márgenes ajustados
        JPanel panelPrincipal = new JPanel(new BorderLayout(10, 10));
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        panelPrincipal.setBackground(new Color(245, 245, 250));
        
        // Panel superior con información
        JPanel panelInfo = new JPanel();
        panelInfo.setLayout(new BoxLayout(panelInfo, BoxLayout.Y_AXIS));
        panelInfo.setBackground(new Color(245, 245, 250));
        panelInfo.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 220), 1, true),
            new EmptyBorder(10, 10, 10, 10)
        ));
        
        JLabel lblTitulo = new JLabel("Tabla Hash");
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 18));
        lblTitulo.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel lblMetodo = new JLabel("Método de transformación: " + metodoHash);
        lblMetodo.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        lblMetodo.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel lblInsercion = new JLabel("Método de inserción: " + metodoInsercion);
        lblInsercion.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        lblInsercion.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel lblColision = new JLabel("Método de colisión: " + metodoColision);
        lblColision.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        lblColision.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        panelInfo.add(lblTitulo);
        panelInfo.add(Box.createRigidArea(new Dimension(0, 5)));
        panelInfo.add(lblMetodo);
        panelInfo.add(Box.createRigidArea(new Dimension(0, 5)));
        panelInfo.add(lblInsercion);
        panelInfo.add(Box.createRigidArea(new Dimension(0, 5)));
        panelInfo.add(lblColision);
        
        // Creación de la tabla de forma vertical
        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modeloTabla.addColumn("Índice");
        modeloTabla.addColumn("Valor");
        
        for (int i = 0; i < numClaves; i++) {
            modeloTabla.addRow(new Object[]{i + 1, ""});
        }
        
        tabla = new JTable(modeloTabla);
        tabla.setRowHeight(35);
        tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        tabla.getTableHeader().setBackground(new Color(230, 230, 245));
        tabla.getTableHeader().setForeground(new Color(60, 60, 80));
        tabla.setGridColor(new Color(210, 210, 230));
        tabla.setRowSelectionAllowed(true);
        tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabla.setSelectionBackground(new Color(210, 230, 255));
        
        // Centrar contenido en ambas columnas
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tabla.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tabla.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        
        // Ajuste opcional del ancho de cada columna
        tabla.getColumnModel().getColumn(0).setPreferredWidth(100);
        tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
        
        scrollTabla = new JScrollPane(tabla);
        scrollTabla.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 220), 1, true));
        
        // Área de resultados
        txtResultado = new JTextArea(8, 20);
        txtResultado.setEditable(false);
        txtResultado.setFont(new Font("Consolas", Font.PLAIN, 14));
        txtResultado.setBackground(new Color(250, 250, 255));
        txtResultado.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        scrollResultado = new JScrollPane(txtResultado);
        scrollResultado.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 220), 1, true),
                "Resultados",
                0,
                0,
                new Font("Segoe UI", Font.BOLD, 14),
                new Color(80, 80, 100)
            ),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        // Panel de botones
        panelBotones = new JPanel(new GridLayout(1, 5, 10, 10));
        panelBotones.setBackground(new Color(245, 245, 250));
        panelBotones.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        JButton btnInsertar = crearBoton("Insertar Claves", "Añadir nuevas claves a la tabla");
        btnInsertar.addActionListener(e -> mostrarDialogoInsercion());
        
        JButton btnSimularColision = crearBoton("Simular Colisión", "Simular colisión sin insertar");
        btnSimularColision.addActionListener(e -> mostrarDialogoSimularColision());
        
        JButton btnBuscar = crearBoton("Buscar Clave", "Buscar una clave en la tabla");
        btnBuscar.addActionListener(e -> buscarSegunMetodo());
        

        JButton btnBorrar = crearBoton("Borrar Clave", "Eliminar una clave de la tabla");
        btnBorrar.addActionListener(e -> mostrarDialogoBorrado());
        
        JButton btnReiniciar = crearBoton("Reiniciar", "Crear una nueva tabla");
        btnReiniciar.addActionListener(e -> reiniciarAplicacion());
        
        panelBotones.add(btnInsertar);
        panelBotones.add(btnSimularColision);
        panelBotones.add(btnBuscar);
        panelBotones.add(btnBorrar);
        panelBotones.add(btnReiniciar);
        
        panelPrincipal.add(panelInfo, BorderLayout.NORTH);
        panelPrincipal.add(scrollTabla, BorderLayout.CENTER);
        panelPrincipal.add(scrollResultado, BorderLayout.SOUTH);
        panelPrincipal.add(panelBotones, BorderLayout.PAGE_END);
        
        getContentPane().removeAll();
        getContentPane().add(panelPrincipal);
        revalidate();
        repaint();
    }
    
    // Método para crear botones con mejoras visuales
    private JButton crearBoton(String texto, String tooltip) {
        JButton boton = new JButton(texto);
        boton.setFont(new Font("Segoe UI", Font.BOLD, 13));
        boton.setBackground(new Color(230, 230, 245));
        boton.setForeground(new Color(60, 60, 80));
        boton.setFocusPainted(false);
        boton.setToolTipText(tooltip);
        boton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boton.setBackground(new Color(210, 210, 230));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                boton.setBackground(new Color(230, 230, 245));
            }
        });
        return boton;
    }
    
    // Diálogo de configuración actualizado para incluir métodos de inserción y colisión
    private void mostrarDialogoConfiguracion() {
        JDialog dialogo = new JDialog(this, "Configuración de Tabla Hash", true);
        dialogo.setSize(500, 450);
        dialogo.setLocationRelativeTo(this);
        dialogo.setLayout(new BorderLayout());
        
        JPanel panelContenido = new JPanel();
        panelContenido.setLayout(new BoxLayout(panelContenido, BoxLayout.Y_AXIS));
        panelContenido.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panelContenido.setBackground(new Color(250, 250, 255));
        
        JLabel lblTitulo = new JLabel("Configuración de Tabla Hash");
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 18));
        lblTitulo.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JPanel panelParametros = new JPanel(new GridLayout(5, 2, 10, 15));
        panelParametros.setBackground(new Color(250, 250, 255));
        panelParametros.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        panelParametros.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JLabel lblNumClaves = new JLabel("Tamaño de la tabla:");
        lblNumClaves.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JTextField txtNumClaves = new JTextField("10");
        txtNumClaves.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JLabel lblDigitosClaves = new JLabel("Dígitos por clave:");
        lblDigitosClaves.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JTextField txtDigitosClaves = new JTextField("4");
        txtDigitosClaves.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JLabel lblMetodo = new JLabel("Método de transformación:");
        lblMetodo.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        String[] metodos = {"Módulo", "Cuadrado", "Plegamiento", "Truncamiento"};
        JComboBox<String> cmbMetodos = new JComboBox<>(metodos);
        cmbMetodos.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JLabel lblInsercion = new JLabel("Método de inserción:");
        lblInsercion.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        String[] tiposInsercion = {"Hash", "Lineal", "Binaria"};
        JComboBox<String> cmbInsercion = new JComboBox<>(tiposInsercion);
        cmbInsercion.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JLabel lblColision = new JLabel("Método de colisión:");
        lblColision.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        String[] tiposColision = {"Lineal", "Cuadrática", "Doble Hash"};
        JComboBox<String> cmbColision = new JComboBox<>(tiposColision);
        cmbColision.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        panelParametros.add(lblNumClaves);
        panelParametros.add(txtNumClaves);
        panelParametros.add(lblDigitosClaves);
        panelParametros.add(txtDigitosClaves);
        panelParametros.add(lblMetodo);
        panelParametros.add(cmbMetodos);
        panelParametros.add(lblInsercion);
        panelParametros.add(cmbInsercion);
        panelParametros.add(lblColision);
        panelParametros.add(cmbColision);
        
        JButton btnCrear = new JButton("Crear Tabla");
        btnCrear.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnCrear.setBackground(new Color(100, 150, 220));
        btnCrear.setForeground(Color.WHITE);
        btnCrear.setFocusPainted(false);
        btnCrear.setBorderPainted(false);
        btnCrear.setAlignmentX(Component.LEFT_ALIGNMENT);
        btnCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCrear.setBackground(new Color(80, 130, 200));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCrear.setBackground(new Color(100, 150, 220));
            }
        });
        
        btnCrear.addActionListener(e -> {
            try {
                int numClaves = Integer.parseInt(txtNumClaves.getText());
                int digitosClaves = Integer.parseInt(txtDigitosClaves.getText());
                metodoHash = (String) cmbMetodos.getSelectedItem();
                metodoInsercion = (String) cmbInsercion.getSelectedItem();
                metodoColision = (String) cmbColision.getSelectedItem();
                
                if (numClaves <= 0 || digitosClaves <= 0) {
                    JOptionPane.showMessageDialog(dialogo, 
                        "Los valores deben ser mayores que 0.", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                inicializarComponentes(numClaves);
                controlador.crearTablaHash(numClaves, digitosClaves, metodoHash, metodoInsercion, metodoColision);
                dialogo.dispose();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialogo, 
                    "Ingrese valores numéricos válidos.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        });
        
        panelContenido.add(lblTitulo);
        panelContenido.add(Box.createRigidArea(new Dimension(0, 10)));
        panelContenido.add(panelParametros);
        panelContenido.add(Box.createRigidArea(new Dimension(0, 20)));
        panelContenido.add(btnCrear);
        
        dialogo.add(panelContenido, BorderLayout.CENTER);
        dialogo.setResizable(false);
        dialogo.setVisible(true);
    }
    
    private void mostrarDialogoInsercion() {
        JDialog dialogo = new JDialog(this, "Insertar Claves", true);
        dialogo.setSize(500, 400);
        dialogo.setLocationRelativeTo(this);
        dialogo.setLayout(new BorderLayout(10, 10));
        
        JPanel panelNorte = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        panelNorte.setBackground(new Color(250, 250, 255));
        JLabel lblClave = new JLabel("Clave:");
        lblClave.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JTextField txtClave = new JTextField(10);
        txtClave.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JButton btnAgregar = new JButton("Insertar");
        btnAgregar.setFont(new Font("Segoe UI", Font.BOLD, 13));
        btnAgregar.setBackground(new Color(100, 150, 220));
        btnAgregar.setForeground(Color.WHITE);
        btnAgregar.setFocusPainted(false);
        
        JButton btnFinalizar = new JButton("Finalizar");
        btnFinalizar.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        btnFinalizar.setBackground(new Color(230, 230, 245));
        btnFinalizar.setForeground(new Color(60, 60, 80));
        btnFinalizar.setFocusPainted(false);
        
        panelNorte.add(lblClave);
        panelNorte.add(txtClave);
        panelNorte.add(btnAgregar);
        panelNorte.add(btnFinalizar);
        
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        JList<String> listaClaves = new JList<>(modeloLista);
        listaClaves.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        listaClaves.setBackground(new Color(250, 250, 255));
        listaClaves.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        JScrollPane scrollLista = new JScrollPane(listaClaves);
        scrollLista.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 220), 1, true), 
                "Claves insertadas",
                0,
                0,
                new Font("Segoe UI", Font.BOLD, 14),
                new Color(80, 80, 100)
            ),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        btnAgregar.addActionListener(e -> {
            try {
                String claveStr = txtClave.getText().trim();
                if (claveStr.isEmpty()) {
                    JOptionPane.showMessageDialog(dialogo, "Ingrese una clave válida.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int clave = Integer.parseInt(claveStr);
                ResultadoOperacion resultado = controlador.insertarClave(clave, metodoHash);
                
                if (resultado.isExito()) {
                    modeloLista.addElement("Clave: " + clave + " → Posición: " + (resultado.getPosicion() + 1));
                    if (!clavesOriginales.contains(clave)) {
                        clavesOriginales.add(clave);
                    }
                    actualizarTabla();
                } else {
                    JOptionPane.showMessageDialog(dialogo, resultado.getMensaje(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                txtClave.setText("");
                txtClave.requestFocus();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialogo, "Ingrese una clave numérica válida.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        btnFinalizar.addActionListener(e -> dialogo.dispose());
        
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAgregar.setBackground(new Color(80, 130, 200));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAgregar.setBackground(new Color(100, 150, 220));
            }
        });
        
        btnFinalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFinalizar.setBackground(new Color(210, 210, 230));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnFinalizar.setBackground(new Color(230, 230, 245));
            }
        });
        
        JPanel panelPrincipal = new JPanel(new BorderLayout(10, 10));
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelPrincipal.setBackground(new Color(250, 250, 255));
        panelPrincipal.add(panelNorte, BorderLayout.NORTH);
        panelPrincipal.add(scrollLista, BorderLayout.CENTER);
        
        dialogo.add(panelPrincipal);
        dialogo.setVisible(true);
    }
    
    // Método para simular colisiones sin insertar claves
    private void mostrarDialogoSimularColision() {
        JDialog dialogo = new JDialog(this, "Simular Colisión", true);
        dialogo.setSize(500, 400);
        dialogo.setLocationRelativeTo(this);
        dialogo.setLayout(new BorderLayout(10, 10));
        
        JPanel panelNorte = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        panelNorte.setBackground(new Color(250, 250, 255));
        JLabel lblClave = new JLabel("Clave a simular:");
        lblClave.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JTextField txtClave = new JTextField(10);
        txtClave.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        
        JButton btnSimular = new JButton("Simular");
        btnSimular.setFont(new Font("Segoe UI", Font.BOLD, 13));
        btnSimular.setBackground(new Color(100, 150, 220));
        btnSimular.setForeground(Color.WHITE);
        btnSimular.setFocusPainted(false);
        
        JButton btnFinalizar = new JButton("Finalizar");
        btnFinalizar.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        btnFinalizar.setBackground(new Color(230, 230, 245));
        btnFinalizar.setForeground(new Color(60, 60, 80));
        btnFinalizar.setFocusPainted(false);
        
        panelNorte.add(lblClave);
        panelNorte.add(txtClave);
        panelNorte.add(btnSimular);
        panelNorte.add(btnFinalizar);
        
        // Área para mostrar resultados de simulación
        JTextArea txtSimulacion = new JTextArea(10, 40);
        txtSimulacion.setEditable(false);
        txtSimulacion.setFont(new Font("Consolas", Font.PLAIN, 14));
        txtSimulacion.setBackground(new Color(250, 250, 255));
        txtSimulacion.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        JScrollPane scrollSimulacion = new JScrollPane(txtSimulacion);
        scrollSimulacion.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 220), 1, true), 
                "Resultados de simulación",
                0,
                0,
                new Font("Segoe UI", Font.BOLD, 14),
                new Color(80, 80, 100)
            ),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
 btnSimular.addActionListener(e -> {
            try {
                String claveStr = txtClave.getText().trim();
                if (claveStr.isEmpty()) {
                    JOptionPane.showMessageDialog(dialogo, "Ingrese una clave válida.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int clave = Integer.parseInt(claveStr);

                if (controlador.getTablaHash() != null) {
                    int indiceOriginal = controlador.getTablaHash().transformarClave(clave, metodoHash);
                    StringBuilder resultado = new StringBuilder();
                    resultado.append("Clave: ").append(clave).append("\n");
                    resultado.append("Método Hash: ").append(metodoHash).append("\n");
                    resultado.append("Posición inicial: ").append(indiceOriginal + 1).append("\n\n");

                    int[] tablaHash = controlador.getTablaHash().getTablaHash();
                    if (tablaHash[indiceOriginal] != -1 && tablaHash[indiceOriginal] != clave) {
                        resultado.append("¡COLISIÓN DETECTADA!\n")
                                 .append("La posición ").append(indiceOriginal + 1)
                                 .append(" ya está ocupada por la clave: ")
                                 .append(tablaHash[indiceOriginal]).append("\n\n")
                                 .append("Resolución según método: ").append(metodoColision).append("\n")
                                 .append("----------------------------------\n");

                        int intentos = 1;
                        int indice = indiceOriginal;
                        int numClaves = controlador.getTablaHash().getNumClaves();

                        while (intentos < numClaves) {
                            indice = calcularSiguientePosicion(indiceOriginal, intentos, metodoColision, clave) % numClaves;
                            resultado.append("Intento ").append(intentos)
                                     .append(": Posición ").append(indice + 1);
                            if (tablaHash[indice] == -1) {
                                resultado.append(" [Vacía – aquí iría la clave]");
                                break;
                            } else if (tablaHash[indice] == clave) {
                                resultado.append(" [La clave ya existe]");
                                break;
                            } else {
                                resultado.append(" [Ocupada por: ").append(tablaHash[indice]).append("]");
                            }
                            resultado.append("\n");
                            intentos++;
                        }

                        if (intentos >= numClaves) {
                            resultado.append("No se pudo resolver la colisión tras ")
                                     .append(numClaves).append(" intentos.\n");
                        }
                    } else {
                        resultado.append("No hay colisión: la posición está libre o contiene la misma clave.\n");
                    }

                    txtSimulacion.setText(resultado.toString());
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialogo, "Ingrese una clave numérica válida.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Sólo cierra el diálogo, no inserta nada
        btnFinalizar.addActionListener(e -> dialogo.dispose());

        // (Opcional) efectos visuales de hover para Finalizar
        btnFinalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFinalizar.setBackground(new Color(210, 210, 230));
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnFinalizar.setBackground(new Color(230, 230, 245));
            }
        });

        // Reensamblar el panel principal y mostrar diálogo
        JPanel panelPrincipal = new JPanel(new BorderLayout(10, 10));
        panelPrincipal.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelPrincipal.setBackground(new Color(250, 250, 255));
        panelPrincipal.add(panelNorte, BorderLayout.NORTH);
        panelPrincipal.add(scrollSimulacion, BorderLayout.CENTER);

        dialogo.getContentPane().removeAll();
        dialogo.add(panelPrincipal);
        dialogo.setVisible(true);
    }
}

// tablahashcontrolador.java

//talahashcontrolador.java

import java.util.List;
import javax.swing.JOptionPane;  
import java.io.Serializable;


public class TablaHashControlador {
    private TablaHashApp vista;
    private TablaHash modelo;
    private String metodoHash;
    private String metodoInsercion;
    private String metodoColision;

    public TablaHashControlador(TablaHashApp vista) {
        this.vista = vista;
    }

    public void crearTablaHash(int numClaves, int digitosClaves, String metodoHash, String metodoInsercion, String metodoColision) {
        try {
            if (numClaves <= 0 || digitosClaves <= 0) {
                vista.mostrarMensaje("Error: Los valores deben ser mayores que 0.");
                return;
            }

            // Guardar los métodos seleccionados
            this.metodoHash = metodoHash;
            this.metodoInsercion = metodoInsercion;
            this.metodoColision = metodoColision;
            
            // Crear el modelo de tabla hash
            modelo = new TablaHash(numClaves, digitosClaves, metodoInsercion, metodoColision);
            vista.mostrarMensaje("Tabla hash creada con éxito. Tamaño: " + numClaves + 
                              ", Dígitos por clave: " + digitosClaves + 
                              ", Método Hash: " + metodoHash + 
                              ", Método Inserción: " + metodoInsercion + 
                              ", Método Colisión: " + metodoColision);

        } catch (Exception ex) {
            vista.mostrarMensaje("Error al crear la tabla hash: " + ex.getMessage());
        }
    }

    public ResultadoOperacion insertarClave(int clave, String metodo) {
        if (modelo == null) {
            vista.mostrarMensaje("Error: Primero debe crear la tabla hash.");
            return new ResultadoOperacion(false, "Error: Tabla hash no inicializada.", -1);
        }

        // Validar que se use el método hash seleccionado al crear la tabla
        if (!metodo.equals(metodoHash)) {
            String mensaje = "Error: Debe usar el método '" + metodoHash + "' seleccionado al crear la tabla.";
            vista.mostrarMensaje(mensaje);
            return new ResultadoOperacion(false, mensaje, -1);
        }

        // Validar clave
        String claveStr = String.valueOf(clave);
        if (claveStr.length() > modelo.getDigitosClaves()) {
            String mensaje = "Error: La clave debe tener máximo " + modelo.getDigitosClaves() + " dígitos.";
            vista.mostrarMensaje(mensaje);
            return new ResultadoOperacion(false, mensaje, -1);
        }

        // Insertar en el modelo
        ResultadoOperacion resultado = modelo.insertarClave(clave, metodo);
        vista.mostrarMensaje(resultado.getMensaje());

        return resultado;
    }

    public ResultadoBusqueda buscarClave(int clave) {
        if (modelo == null) {
            vista.mostrarMensaje("Error: Primero debe crear la tabla hash.");
            return new ResultadoBusqueda(false, "Error: Tabla hash no inicializada.", -1, 0);
        }

        // Usar el método de búsqueda correspondiente al método de inserción
        return modelo.buscarClave(clave, metodoHash);
    }

    public ResultadoOperacion borrarClave(int clave) {
        if (modelo == null) {
            vista.mostrarMensaje("Error: Primero debe crear la tabla hash.");
            return new ResultadoOperacion(false, "Error: Tabla hash no inicializada.", -1);
        }

        return modelo.borrarClave(clave, metodoHash);
    }

    public TablaHash getTablaHash() {
        return modelo;
    }
    
    public String getMetodoHash() {
        return metodoHash;
    }
    
    public String getMetodoInsercion() {
        return metodoInsercion;
    }
    
    public String getMetodoColision() {
        return metodoColision;
    }
    
    public void setModelo(TablaHash modelo) {
        this.modelo = modelo;
    }
    
    public void setMetodoHash(String metodoHash) {
        this.metodoHash = metodoHash;
    }
    
    public void setMetodoInsercion(String metodoInsercion) {
        this.metodoInsercion = metodoInsercion;
    }
    
    public void setMetodoColision(String metodoColision) {
        this.metodoColision = metodoColision;
    }
    
    // Guardar datos
    public void guardarDatos(List<Integer> clavesOriginales) {
        if (modelo != null) {
            PersistenciaUtil.guardarDatos(modelo, clavesOriginales, metodoHash);
            vista.mostrarMensaje("Datos guardados correctamente.");
        }
    }
    
    // Cargar datos
    public boolean cargarDatos() {
        if (PersistenciaUtil.existenDatosGuardados()) {
            PersistenciaUtil.DatosAplicacion datos = PersistenciaUtil.cargarDatos();
            if (datos != null) {
                this.modelo = datos.getTablaHash();
                this.metodoHash = datos.getMetodoHash();
                this.metodoInsercion = modelo.getMetodoInsercion();
                this.metodoColision = modelo.getMetodoColision();
                vista.mostrarMensaje("Datos cargados correctamente.");
                return true;
            }
        }
        return false;
    }
}